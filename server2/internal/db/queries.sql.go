// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users.ids DEFAULT
VALUES
RETURNING user_id
`

func (q *Queries) CreateUser(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, createUser)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserDataByUserId = `-- name: GetUserDataByUserId :one
SELECT user_id, username, password, salt, first_name, last_name, role, vertical, created_at, updated_at
FROM users.data
WHERE user_id = $1
`

func (q *Queries) GetUserDataByUserId(ctx context.Context, userID int32) (UsersDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByUserId, userID)
	var i UsersDatum
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Salt,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Vertical,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDataByUsername = `-- name: GetUserDataByUsername :one
SELECT user_id, username, password, salt, first_name, last_name, role, vertical, created_at, updated_at
FROM users.data
WHERE username = $1
`

func (q *Queries) GetUserDataByUsername(ctx context.Context, username pgtype.Text) (UsersDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByUsername, username)
	var i UsersDatum
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Salt,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Vertical,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
